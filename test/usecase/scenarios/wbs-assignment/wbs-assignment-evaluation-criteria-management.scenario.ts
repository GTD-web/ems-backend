import { BaseE2ETest } from '../../../base-e2e.spec';
import { WbsAssignmentBasicScenario } from './wbs-assignment-basic.scenario';

/**
 * WBS 평가기준 관리 시나리오 클래스
 * 
 * WBS 평가기준의 생성, 저장, 삭제, 재저장 기능을 테스트합니다.
 */
export class WbsAssignmentEvaluationCriteriaManagementScenario {
  private basicScenario: WbsAssignmentBasicScenario;

  constructor(private readonly testSuite: BaseE2ETest) {
    this.basicScenario = new WbsAssignmentBasicScenario(testSuite);
  }

  /**
   * WBS 평가기준을 조회합니다.
   */
  async WBS_평가기준을_조회한다(wbsItemId: string): Promise<any[]> {
    const response = await this.testSuite
      .request()
      .get(`/admin/evaluation-criteria/wbs-evaluation-criteria?wbsItemId=${wbsItemId}`)
      .expect(200);

    return response.body;
  }

  /**
   * WBS 항목별 평가기준을 조회합니다.
   */
  async WBS_항목별_평가기준을_조회한다(wbsItemId: string): Promise<any> {
    const response = await this.testSuite
      .request()
      .get(`/admin/evaluation-criteria/wbs-evaluation-criteria/wbs-item/${wbsItemId}`)
      .expect(200);

    return response.body;
  }

  /**
   * WBS 평가기준을 저장합니다 (Upsert).
   */
  async WBS_평가기준을_저장한다(
    wbsItemId: string,
    criteria: string,
    importance: number = 5,
  ): Promise<any> {
    const response = await this.testSuite
      .request()
      .post(`/admin/evaluation-criteria/wbs-evaluation-criteria/wbs-item/${wbsItemId}`)
      .send({
        criteria,
        importance,
      })
      .expect(200);

    return response.body;
  }

  /**
   * WBS 평가기준을 삭제합니다.
   */
  async WBS_평가기준을_삭제한다(criteriaId: string): Promise<any> {
    const response = await this.testSuite
      .request()
      .delete(`/admin/evaluation-criteria/wbs-evaluation-criteria/${criteriaId}`)
      .expect(200);

    return response.body;
  }

  /**
   * WBS 항목의 평가기준을 전체 삭제합니다.
   */
  async WBS_항목_평가기준을_전체삭제한다(wbsItemId: string): Promise<any> {
    const response = await this.testSuite
      .request()
      .delete(`/admin/evaluation-criteria/wbs-evaluation-criteria/wbs-item/${wbsItemId}`)
      .expect(200);

    return response.body;
  }

  /**
   * WBS 할당 후 평가기준 자동생성, 저장, 삭제, 재저장 시나리오를 실행합니다.
   */
  async WBS_평가기준_생성_저장_삭제_재저장_시나리오를_실행한다(
    periodId: string,
    employeeId: string,
    wbsItemId: string,
    projectId: string,
  ): Promise<{
    assignmentCreated: boolean;
    autoGeneratedCriteria: boolean;
    criteriaSaved: boolean;
    criteriaDeleted: boolean;
    criteriaReSaved: boolean;
    verifiedEndpoints: number;
    criteriaDetails?: {
      autoGeneratedId?: string;
      savedId?: string;
      reSavedId?: string;
    };
  }> {
    console.log('📝 WBS 평가기준 생성-저장-삭제-재저장 시나리오');

    let verifiedEndpoints = 0;

    // 1. 프로젝트 할당 먼저 생성
    console.log('📝 1. 프로젝트 할당 생성 중...');
    await this.basicScenario.프로젝트를_대량으로_할당한다(periodId, [projectId], [employeeId]);
    console.log('✅ 프로젝트 할당 완료');

    // 2. WBS 할당 전 평가기준 상태 확인
    console.log('📝 2. WBS 할당 전 평가기준 상태 확인');
    const criteriaBeforeAssignment = await this.WBS_평가기준을_조회한다(wbsItemId);
    const beforeCount = criteriaBeforeAssignment?.length || 0;
    console.log(`📝 WBS 할당 전 평가기준 수: ${beforeCount}개`);
    verifiedEndpoints++;

    // 3. WBS 할당 생성 (자동으로 평가기준 생성됨)
    console.log('📝 3. WBS 할당 생성 (자동 평가기준 생성)');
    const assignment = await this.basicScenario.WBS_할당을_생성한다(
      employeeId,
      wbsItemId,
      projectId,
      periodId,
    );
    console.log(`✅ WBS 할당 생성 완료: ${assignment.id}`);

    // 4. WBS 할당 후 평가기준 자동생성 확인
    console.log('📝 4. WBS 할당 후 평가기준 자동생성 확인');
    const criteriaAfterAssignment = await this.WBS_평가기준을_조회한다(wbsItemId);
    const afterCount = criteriaAfterAssignment?.length || 0;
    console.log(`📝 WBS 할당 후 평가기준 수: ${afterCount}개`);
    verifiedEndpoints++;

    const autoGeneratedCriteria = afterCount > beforeCount;
    let autoGeneratedId: string | undefined;

    if (autoGeneratedCriteria) {
      // 자동생성된 평가기준 ID 추출
      const newCriteria = criteriaAfterAssignment.find(
        (c: any) => !criteriaBeforeAssignment?.some((existing: any) => existing.id === c.id)
      );
      autoGeneratedId = newCriteria?.id;
      console.log(`✅ 평가기준 자동생성 확인: ${afterCount - beforeCount}개 생성, ID: ${autoGeneratedId}`);
    } else {
      console.log(`⚠️ 평가기준 자동생성 실패 - 현재 시스템 제한`);
    }

    // 5. 평가기준 저장 (Upsert) 테스트
    console.log('📝 5. 평가기준 저장 (Upsert) 테스트');
    let criteriaSaved = false;
    let savedId: string | undefined;

    try {
      const savedCriteria = await this.WBS_평가기준을_저장한다(
        wbsItemId,
        '수동으로 저장한 평가기준',
        8,
      );
      criteriaSaved = true;
      savedId = savedCriteria.id;
      console.log(`✅ 평가기준 저장 완료: ID=${savedId}, criteria="${savedCriteria.criteria}", importance=${savedCriteria.importance}`);
    } catch (error) {
      console.log(`❌ 평가기준 저장 실패:`, error.message);
    }
    verifiedEndpoints++;

    // 5.5. 대시보드에서 평가기준 저장 변경사항 검증
    console.log('📝 5.5. 대시보드에서 평가기준 저장 변경사항 검증');
    const saveVerification = await this.basicScenario.평가기준_변경사항을_대시보드에서_검증한다(
      periodId,
      employeeId,
      wbsItemId,
      {
        beforeCount: afterCount,
        afterCount: afterCount + 1, // 저장으로 인한 증가
        expectedCriteria: '수동으로 저장한 평가기준',
        expectedImportance: 8,
      },
    );
    verifiedEndpoints += saveVerification.verifiedEndpoints;
    console.log(`📊 저장 변경사항 검증: ${saveVerification.criteriaChangeVerified ? '✅' : '❌'}`);

    // 6. 저장된 평가기준 확인
    console.log('📝 6. 저장된 평가기준 확인');
    const criteriaAfterSave = await this.WBS_평가기준을_조회한다(wbsItemId);
    const saveCount = criteriaAfterSave?.length || 0;
    console.log(`📝 저장 후 평가기준 수: ${saveCount}개`);
    verifiedEndpoints++;

    // 7. 평가기준 삭제 테스트
    console.log('📝 7. 평가기준 삭제 테스트');
    let criteriaDeleted = false;

    if (savedId) {
      try {
        const deleteResult = await this.WBS_평가기준을_삭제한다(savedId);
        criteriaDeleted = deleteResult.success;
        console.log(`✅ 평가기준 삭제 완료: ${criteriaDeleted ? '성공' : '실패'}`);
      } catch (error) {
        console.log(`❌ 평가기준 삭제 실패:`, error.message);
      }
    } else {
      console.log(`⚠️ 삭제할 평가기준 ID가 없어 삭제 테스트를 건너뜁니다`);
    }
    verifiedEndpoints++;

    // 8. 삭제 후 평가기준 상태 확인
    console.log('📝 8. 삭제 후 평가기준 상태 확인');
    const criteriaAfterDelete = await this.WBS_평가기준을_조회한다(wbsItemId);
    const deleteCount = criteriaAfterDelete?.length || 0;
    console.log(`📝 삭제 후 평가기준 수: ${deleteCount}개`);
    verifiedEndpoints++;

    // 8.5. 대시보드에서 평가기준 삭제 변경사항 검증
    console.log('📝 8.5. 대시보드에서 평가기준 삭제 변경사항 검증');
    const deleteVerification = await this.basicScenario.평가기준_변경사항을_대시보드에서_검증한다(
      periodId,
      employeeId,
      wbsItemId,
      {
        beforeCount: saveCount,
        afterCount: deleteCount,
      },
    );
    verifiedEndpoints += deleteVerification.verifiedEndpoints;
    console.log(`📊 삭제 변경사항 검증: ${deleteVerification.criteriaChangeVerified ? '✅' : '❌'}`);

    // 9. 평가기준 재저장 테스트
    console.log('📝 9. 평가기준 재저장 테스트');
    let criteriaReSaved = false;
    let reSavedId: string | undefined;

    try {
      const reSavedCriteria = await this.WBS_평가기준을_저장한다(
        wbsItemId,
        '재저장한 평가기준',
        9,
      );
      criteriaReSaved = true;
      reSavedId = reSavedCriteria.id;
      console.log(`✅ 평가기준 재저장 완료: ID=${reSavedId}, criteria="${reSavedCriteria.criteria}", importance=${reSavedCriteria.importance}`);
    } catch (error) {
      console.log(`❌ 평가기준 재저장 실패:`, error.message);
    }
    verifiedEndpoints++;

    // 10. 최종 평가기준 상태 확인
    console.log('📝 10. 최종 평가기준 상태 확인');
    const finalCriteria = await this.WBS_평가기준을_조회한다(wbsItemId);
    const finalCount = finalCriteria?.length || 0;
    console.log(`📝 최종 평가기준 수: ${finalCount}개`);
    verifiedEndpoints++;

    // 10.5. 대시보드에서 평가기준 재저장 변경사항 검증
    console.log('📝 10.5. 대시보드에서 평가기준 재저장 변경사항 검증');
    const reSaveVerification = await this.basicScenario.평가기준_변경사항을_대시보드에서_검증한다(
      periodId,
      employeeId,
      wbsItemId,
      {
        beforeCount: deleteCount,
        afterCount: finalCount,
        expectedCriteria: '재저장한 평가기준',
        expectedImportance: 9,
      },
    );
    verifiedEndpoints += reSaveVerification.verifiedEndpoints;
    console.log(`📊 재저장 변경사항 검증: ${reSaveVerification.criteriaChangeVerified ? '✅' : '❌'}`);

    // 11. WBS 항목별 평가기준 조회 테스트
    console.log('📝 11. WBS 항목별 평가기준 조회 테스트');
    try {
      const wbsItemCriteria = await this.WBS_항목별_평가기준을_조회한다(wbsItemId);
      console.log(`✅ WBS 항목별 평가기준 조회 완료: wbsItemId=${wbsItemCriteria.wbsItemId}, criteria 수=${wbsItemCriteria.criteria?.length || 0}개`);
    } catch (error) {
      console.log(`❌ WBS 항목별 평가기준 조회 실패:`, error.message);
    }
    verifiedEndpoints++;

    console.log(`✅ WBS 평가기준 생성-저장-삭제-재저장 시나리오 완료`);
    console.log(`📊 시나리오 결과:`);
    console.log(`  - WBS 할당: ✅`);
    console.log(`  - 평가기준 자동생성: ${autoGeneratedCriteria ? '✅' : '❌'}`);
    console.log(`  - 평가기준 저장: ${criteriaSaved ? '✅' : '❌'}`);
    console.log(`  - 평가기준 삭제: ${criteriaDeleted ? '✅' : '❌'}`);
    console.log(`  - 평가기준 재저장: ${criteriaReSaved ? '✅' : '❌'}`);
    console.log(`  - 검증된 엔드포인트: ${verifiedEndpoints}개`);

    return {
      assignmentCreated: true,
      autoGeneratedCriteria,
      criteriaSaved,
      criteriaDeleted,
      criteriaReSaved,
      verifiedEndpoints,
      criteriaDetails: {
        autoGeneratedId,
        savedId,
        reSavedId,
      },
    };
  }

  /**
   * WBS 항목 평가기준 전체 삭제 시나리오를 실행합니다.
   */
  async WBS_항목_평가기준_전체삭제_시나리오를_실행한다(
    periodId: string,
    employeeId: string,
    wbsItemId: string,
    projectId: string,
  ): Promise<{
    assignmentCreated: boolean;
    criteriaCreated: boolean;
    criteriaBulkDeleted: boolean;
    verifiedEndpoints: number;
  }> {
    console.log('📝 WBS 항목 평가기준 전체삭제 시나리오');

    let verifiedEndpoints = 0;

    // 1. 프로젝트 할당 먼저 생성
    console.log('📝 1. 프로젝트 할당 생성 중...');
    await this.basicScenario.프로젝트를_대량으로_할당한다(periodId, [projectId], [employeeId]);
    console.log('✅ 프로젝트 할당 완료');

    // 2. WBS 할당 생성
    console.log('📝 2. WBS 할당 생성');
    const assignment = await this.basicScenario.WBS_할당을_생성한다(
      employeeId,
      wbsItemId,
      projectId,
      periodId,
    );
    console.log(`✅ WBS 할당 생성 완료: ${assignment.id}`);

    // 3. 여러 평가기준 생성
    console.log('📝 3. 여러 평가기준 생성');
    const criteriaToCreate = [
      { criteria: '첫 번째 평가기준', importance: 5 },
      { criteria: '두 번째 평가기준', importance: 7 },
      { criteria: '세 번째 평가기준', importance: 9 },
    ];

    const createdCriteriaIds: string[] = [];
    for (const criteriaData of criteriaToCreate) {
      try {
        const savedCriteria = await this.WBS_평가기준을_저장한다(
          wbsItemId,
          criteriaData.criteria,
          criteriaData.importance,
        );
        createdCriteriaIds.push(savedCriteria.id);
        console.log(`✅ 평가기준 생성: ${criteriaData.criteria} (ID: ${savedCriteria.id})`);
      } catch (error) {
        console.log(`❌ 평가기준 생성 실패: ${criteriaData.criteria}`, error.message);
      }
    }
    verifiedEndpoints += criteriaToCreate.length;

    // 4. 생성된 평가기준 확인
    console.log('📝 4. 생성된 평가기준 확인');
    const criteriaAfterCreate = await this.WBS_평가기준을_조회한다(wbsItemId);
    const createCount = criteriaAfterCreate?.length || 0;
    console.log(`📝 생성 후 평가기준 수: ${createCount}개`);
    verifiedEndpoints++;

    // 5. WBS 항목 평가기준 전체 삭제
    console.log('📝 5. WBS 항목 평가기준 전체 삭제');
    let criteriaBulkDeleted = false;

    try {
      const deleteResult = await this.WBS_항목_평가기준을_전체삭제한다(wbsItemId);
      criteriaBulkDeleted = deleteResult.success;
      console.log(`✅ WBS 항목 평가기준 전체 삭제 완료: ${criteriaBulkDeleted ? '성공' : '실패'}`);
    } catch (error) {
      console.log(`❌ WBS 항목 평가기준 전체 삭제 실패:`, error.message);
    }
    verifiedEndpoints++;

    // 6. 삭제 후 평가기준 상태 확인
    console.log('📝 6. 삭제 후 평가기준 상태 확인');
    const criteriaAfterDelete = await this.WBS_평가기준을_조회한다(wbsItemId);
    const deleteCount = criteriaAfterDelete?.length || 0;
    console.log(`📝 전체 삭제 후 평가기준 수: ${deleteCount}개`);
    verifiedEndpoints++;

    console.log(`✅ WBS 항목 평가기준 전체삭제 시나리오 완료`);
    console.log(`📊 시나리오 결과:`);
    console.log(`  - WBS 할당: ✅`);
    console.log(`  - 평가기준 생성: ${createdCriteriaIds.length}/${criteriaToCreate.length}개`);
    console.log(`  - 평가기준 전체 삭제: ${criteriaBulkDeleted ? '✅' : '❌'}`);
    console.log(`  - 검증된 엔드포인트: ${verifiedEndpoints}개`);

    return {
      assignmentCreated: true,
      criteriaCreated: createdCriteriaIds.length > 0,
      criteriaBulkDeleted,
      verifiedEndpoints,
    };
  }
}
