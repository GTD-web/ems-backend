import { BaseE2ETest } from '../../../base-e2e.spec';
import { WbsAssignmentBasicScenario } from './wbs-assignment-basic.scenario';

/**
 * WBS 할당 후 평가기준 검증 시나리오 클래스
 * 
 * WBS 할당 시 평가기준이 자동으로 생성되는지 검증합니다.
 */
export class WbsAssignmentCriteriaScenario {
  private basicScenario: WbsAssignmentBasicScenario;

  constructor(private readonly testSuite: BaseE2ETest) {
    this.basicScenario = new WbsAssignmentBasicScenario(testSuite);
  }

  /**
   * WBS 평가기준을 조회합니다.
   */
  async WBS_평가기준을_조회한다(wbsItemId: string): Promise<any> {
    const response = await this.testSuite
      .request()
      .get(`/admin/evaluation-criteria/wbs-evaluation-criteria/wbs-item/${wbsItemId}`)
      .expect(200);

    return response.body;
  }

  /**
   * WBS 평가기준을 생성합니다.
   */
  async WBS_평가기준을_생성한다(
    wbsItemId: string,
    criteria: string,
    importance: number = 5,
  ): Promise<any> {
    const response = await this.testSuite
      .request()
      .post('/admin/evaluation-criteria/wbs-evaluation-criteria')
      .send({
        wbsItemId,
        criteria,
        importance,
      })
      .expect(201);

    return response.body;
  }

  /**
   * WBS 할당 후 평가기준 자동 생성 검증 시나리오를 실행합니다.
   */
  async WBS_할당_후_평가기준_자동생성_검증_시나리오를_실행한다(
    periodId: string,
    employeeId: string,
    wbsItemId: string,
    projectId: string,
  ): Promise<{
    assignmentCreated: boolean;
    criteriaAutoGenerated: boolean;
    verifiedEndpoints: number;
  }> {
    console.log('📝 WBS 할당 후 평가기준 자동생성 검증 시나리오');

    // 1. 프로젝트 할당 먼저 생성
    console.log('📝 프로젝트 할당 생성 중...');
    await this.basicScenario.프로젝트를_대량으로_할당한다(periodId, [projectId], [employeeId]);
    console.log('✅ 프로젝트 할당 완료');

    // 2. WBS 할당 전 평가기준 상태 확인
    const criteriaBeforeAssignment = await this.WBS_평가기준을_조회한다(wbsItemId);
    const beforeCount = criteriaBeforeAssignment?.criteria?.length || 0;
    console.log(`📝 WBS 할당 전 평가기준 수: ${beforeCount}개`);
    console.log(`📝 WBS 할당 전 평가기준 데이터:`, JSON.stringify(criteriaBeforeAssignment, null, 2));

    // 3. WBS 할당 생성
    const assignment = await this.basicScenario.WBS_할당을_생성한다(
      employeeId,
      wbsItemId,
      projectId,
      periodId,
    );
    console.log(`✅ WBS 할당 생성 완료: ${assignment.id}`);

    // 4. WBS 할당 후 평가기준 상태 확인
    const criteriaAfterAssignment = await this.WBS_평가기준을_조회한다(wbsItemId);
    const afterCount = criteriaAfterAssignment?.criteria?.length || 0;
    console.log(`📝 WBS 할당 후 평가기준 수: ${afterCount}개`);
    console.log(`📝 WBS 할당 후 평가기준 데이터:`, JSON.stringify(criteriaAfterAssignment, null, 2));

    // 5. 평가기준 자동 생성 검증
    const criteriaAutoGenerated = afterCount > beforeCount;
    
    console.log(`📝 평가기준 자동생성 검증: ${beforeCount}개 → ${afterCount}개`);
    expect(criteriaAutoGenerated).toBe(true);
    console.log(`✅ 평가기준 자동생성 확인: ${criteriaAutoGenerated ? '성공' : '실패'}`);

    // 6. 생성된 평가기준 상세 검증
    if (criteriaAutoGenerated) {
      const newCriteria = criteriaAfterAssignment.criteria.find(
        (c: any) => !criteriaBeforeAssignment?.criteria?.some((existing: any) => existing.id === c.id)
      );
      
      expect(newCriteria).toBeDefined();
      expect(newCriteria.wbsItemId).toBe(wbsItemId);
      expect(newCriteria.criteria).toBe(''); // 빈 평가기준으로 생성됨
      expect(newCriteria.importance).toBe(5); // 기본 중요도
      console.log(`✅ 자동생성된 평가기준 검증 완료: ID=${newCriteria.id}`);
    }

    console.log(`✅ WBS 할당 후 평가기준 자동생성 검증 완료 - 할당: ${assignment.id}, 평가기준 자동생성: ${criteriaAutoGenerated}`);

    return {
      assignmentCreated: true,
      criteriaAutoGenerated,
      verifiedEndpoints: 2, // WBS 할당 + 평가기준 조회
    };
  }

  /**
   * WBS 할당 후 평가기준 수정 검증 시나리오를 실행합니다.
   */
  async WBS_할당_후_평가기준_수정_검증_시나리오를_실행한다(
    periodId: string,
    employeeId: string,
    wbsItemId: string,
    projectId: string,
  ): Promise<{
    assignmentCreated: boolean;
    criteriaModified: boolean;
    verifiedEndpoints: number;
  }> {
    console.log('📝 WBS 할당 후 평가기준 수정 검증 시나리오');

    // 1. WBS 할당 및 평가기준 자동생성
    const autoGenResult = await this.WBS_할당_후_평가기준_자동생성_검증_시나리오를_실행한다(
      periodId,
      employeeId,
      wbsItemId,
      projectId,
    );

    if (!autoGenResult.criteriaAutoGenerated) {
      console.log('⚠️ 평가기준 자동생성이 실패하여 수정 검증을 건너뜁니다');
      return {
        assignmentCreated: autoGenResult.assignmentCreated,
        criteriaModified: false,
        verifiedEndpoints: autoGenResult.verifiedEndpoints,
      };
    }

    // 2. 평가기준 수정
    const criteria = await this.WBS_평가기준을_조회한다(wbsItemId);
    const targetCriteria = criteria[0]; // 첫 번째 평가기준 수정

    const updatedCriteria = await this.testSuite
      .request()
      .patch(`/admin/evaluation-criteria/wbs-evaluation-criteria/${targetCriteria.id}`)
      .send({
        criteria: '수정된 평가기준 내용',
        importance: 8,
      })
      .expect(200);

    console.log(`✅ 평가기준 수정 완료: ${targetCriteria.id}`);

    // 3. 수정된 평가기준 검증
    const modifiedCriteria = await this.WBS_평가기준을_조회한다(wbsItemId);
    const updatedItem = modifiedCriteria.find((c: any) => c.id === targetCriteria.id);
    
    expect(updatedItem).toBeDefined();
    expect(updatedItem.criteria).toBe('수정된 평가기준 내용');
    expect(updatedItem.importance).toBe(8);
    console.log(`✅ 평가기준 수정 검증 완료`);

    console.log(`✅ WBS 할당 후 평가기준 수정 검증 완료`);

    return {
      assignmentCreated: autoGenResult.assignmentCreated,
      criteriaModified: true,
      verifiedEndpoints: autoGenResult.verifiedEndpoints + 2, // 수정 + 조회
    };
  }
}
