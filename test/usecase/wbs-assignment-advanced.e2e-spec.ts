import { BaseE2ETest } from '../base-e2e.spec';
import { SeedDataScenario } from './scenarios/seed-data.scenario';
import { 
  WbsAssignmentCriteriaScenario,
  WbsAssignmentEvaluationLineScenario,
  WbsAssignmentIntegrationScenario 
} from './scenarios/wbs-assignment';

describe('WBS 할당 고급 기능 (E2E)', () => {
  let testSuite: BaseE2ETest;
  let seedDataScenario: SeedDataScenario;
  let criteriaScenario: WbsAssignmentCriteriaScenario;
  let evaluationLineScenario: WbsAssignmentEvaluationLineScenario;
  let integrationScenario: WbsAssignmentIntegrationScenario;

  let evaluationPeriodId: string;
  let employeeIds: string[];
  let projectIds: string[];
  let wbsItemIds: string[];

  beforeAll(async () => {
    testSuite = new BaseE2ETest();
    await testSuite.initializeApp();

    seedDataScenario = new SeedDataScenario(testSuite);
    criteriaScenario = new WbsAssignmentCriteriaScenario(testSuite);
    evaluationLineScenario = new WbsAssignmentEvaluationLineScenario(testSuite);
    integrationScenario = new WbsAssignmentIntegrationScenario(testSuite);
  });

  afterAll(async () => {
    await testSuite.closeApp();
  });

  beforeEach(async () => {
    // 시드 데이터 생성
    const seedResult = await seedDataScenario.시드_데이터를_생성한다({
      clearExisting: true,
      useRealDepartments: false,
      useRealEmployees: false,
      scenario: 'with_period',
      projectCount: 2,
      wbsPerProject: 3,
    });

    evaluationPeriodId = seedResult.evaluationPeriodId;
    employeeIds = seedResult.employeeIds;
    projectIds = seedResult.projectIds;
    wbsItemIds = seedResult.wbsItemIds;

    console.log(`📝 테스트 데이터 준비 완료 - 평가기간: ${evaluationPeriodId}, 직원: ${employeeIds.length}명, 프로젝트: ${projectIds.length}개, WBS: ${wbsItemIds.length}개`);
  });

  describe('WBS 할당 후 평가기준 자동생성 검증', () => {
    it('WBS 할당 시 평가기준이 자동으로 생성되는지 검증한다', async () => {
      const result = await criteriaScenario.WBS_할당_후_평가기준_자동생성_검증_시나리오를_실행한다(
        evaluationPeriodId,
        employeeIds[0],
        wbsItemIds[0],
        projectIds[0],
      );

      expect(result.assignmentCreated).toBe(true);
      expect(result.criteriaAutoGenerated).toBe(true);
      expect(result.verifiedEndpoints).toBeGreaterThan(0);
    });

    it('WBS 할당 후 평가기준을 수정할 수 있는지 검증한다', async () => {
      const result = await criteriaScenario.WBS_할당_후_평가기준_수정_검증_시나리오를_실행한다(
        evaluationPeriodId,
        employeeIds[0],
        wbsItemIds[0],
        projectIds[0],
      );

      expect(result.assignmentCreated).toBe(true);
      expect(result.criteriaModified).toBe(true);
      expect(result.verifiedEndpoints).toBeGreaterThan(0);
    });
  });

  describe('WBS 할당 후 평가라인 자동구성 검증', () => {
    it('WBS 할당 시 평가라인이 자동으로 구성되고 1차 평가자가 지정되는지 검증한다', async () => {
      // WBS 할당 시 자동으로 1차/2차 평가자가 설정되는지 검증
      const result = await evaluationLineScenario.WBS_할당_후_평가라인_자동구성_검증_시나리오를_실행한다(
        evaluationPeriodId,
        employeeIds[0], // 피평가자
        wbsItemIds[0],
        projectIds[0],
      );

      expect(result.assignmentCreated).toBe(true);
      expect(result.evaluationLineConfigured).toBe(true);
      expect(result.primaryEvaluatorAssigned).toBe(true);
      expect(result.verifiedEndpoints).toBeGreaterThan(0);
    });

    it('WBS 할당 후 1차 평가자를 변경할 수 있는지 검증한다', async () => {
      // 다른 직원을 1차 평가자로 설정
      const newPrimaryEvaluatorId = employeeIds[1];

      const result = await evaluationLineScenario.WBS_할당_후_평가라인_수정_검증_시나리오를_실행한다(
        evaluationPeriodId,
        employeeIds[0],
        wbsItemIds[0],
        projectIds[0],
        newPrimaryEvaluatorId,
      );

      expect(result.assignmentCreated).toBe(true);
      expect(result.evaluationLineModified).toBe(true);
      expect(result.verifiedEndpoints).toBeGreaterThan(0);
    });
  });

  describe('WBS 할당 통합 검증', () => {
    it('WBS 할당 후 평가기준과 평가라인이 모두 자동으로 생성되는지 통합 검증한다', async () => {
      const result = await integrationScenario.WBS_할당_후_평가기준_및_평가라인_통합_검증_시나리오를_실행한다(
        evaluationPeriodId,
        employeeIds[0],
        wbsItemIds[0],
        projectIds[0],
      );

      expect(result.assignmentCreated).toBe(true);
      expect(result.criteriaAutoGenerated).toBe(true);
      expect(result.evaluationLineConfigured).toBe(true);
      expect(result.primaryEvaluatorAssigned).toBe(true);
      expect(result.verifiedEndpoints).toBeGreaterThan(0);
    });

    it('WBS 할당 후 대시보드에서 모든 정보가 올바르게 표시되는지 검증한다', async () => {
      const result = await integrationScenario.WBS_할당_후_대시보드_검증_시나리오를_실행한다(
        evaluationPeriodId,
        [employeeIds[0]],
        [wbsItemIds[0], wbsItemIds[1]],
        projectIds[0],
      );

      expect(result.assignments.length).toBe(2); // 1명 × 2개 WBS
      expect(result.verifiedDashboardEndpoints).toBe(1);
    });
  });
});
